Question 6. In what file are copyin, copyout and memmove are defined? Why can't copyin and copyout be implemented simply as memmove?
Answer:
    function: file name (location)
    copyin: ~/os161/os161-1.11/kern/lib/copyinout.c, Description: "Copy a block of memory of length LEN from user-level address USERSRC to kernel address DEST. We can use memcpy because it's protected by the pcb_badfaultfunc/copyfail logic."
    copyout: ~/os161/os161-1.11/kern/lib/copyinout.c, Description: "Copy a block of memory of length LEN from kernel address SRC to user-level address USERDEST. We can use memcpy because it's protected by the pcb_badfaultfunc/copyfail logic."
    memmove:  ~/os161/os161-1.11/lib/libc/memmove.c, Description: "C standard function - copy a block of memory, handling overlapping regions correctly."

    The `memmove` function is shared between both contexts, libc and the kernel. Therefore, `memmove` has to be able to handle copying memory as formatted in both libc and the kernel. Conversely, `copyin` copies memory from user-level to kernel-level and `copyout` copies memory from kernel-level to user-level.

    ^ I am not sure why this would be simpler or if my answer is correct. Perhaps, memmove is only copying memory from virtual to virtual as the kernel level or the user level, not copying memory between levels.

Question 7. What is the purpose of userptr_t? Explain briefly.
Answer: 
    As defined in `~/os161/os161-1.11/kern/include/types.h`, `userptr_t` is a pointer to a one-byte struct therefore it won't mix with other pointers.

Question 8. What is the numerical value of the exception code for a MIPS system call? 
Answer:
   The MIPS exception code for system calls is the `EX_SYS` macro, which has a numerical value of 8 as defined in `~/os161/os161-1.11/kern/compile/ASST1/machine/trapframe.h`.

Question 9. Why does mips_trap() set curspl to SPL_HIGH "manually", instead of using splhigh()?
Answer:
    Need to look into further... there is something in trap.c about being in kernel mode vs user mode and the availability of some function calls

Question 12. What would be required to implement a system call that took more than 4 arguments?
Answer:
    According to `~/os161/os161-1.11/kern/arch/mips/mips/syscall.c`, Extra parameters should be retrieved from the stack at the user level, beginning at the address sp+16.