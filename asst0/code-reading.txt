Question 1. Which register number is used for the frame pointer (fp) in OS/161? How do you know? Explain your answer.
Answer 1: In `asmdefs.h`, there is a comment on line 40 `#define s8  $30    /* saved 8 = frame pointer */` indicating that s8 is used as the frame pointer.

Question 2. What bus/buses does OS/161 support? How do you know? Explain your answer. 
Answer 2: The file comment in `bus.h` on line 7 indicates that the only bus supported for MIPS is LAMEbus.

Question 4. What are some of the details which would make a function “machine dependent”? Why might it be important to maintain this separation, instead of just putting all of the code in one function?
Answer 4: Elements of `bus.h`, `ktypes.h`, and `pcb.h` (in regard to kernel threads) are machine dependent. C threads (user threads) eventually become kernel threads. If the user thread code and the kernel thread code is in the same function, it makes it diffcult to support multiple hardware types as the implementation of kernel level threads is machine dependent. 

Question 5. What does splx return? How did you get your answer? Explain. 
Answer 5: In `~/os161/os161-1.11/kern/arch/mips/mips/spl.c` splx returns oldspl which is the old set priority level.

Question 6. How many hardware interrupts lines does MIPS have? How many of them are we actually using in OS/161?
Answer 6: According to line 133 of `~/os161/os161-1.11/kern/arch/mips/mips/start.S` "[t]he MIPS has six hardware interrupt lines and two software interrupts." Later in the paragraph it says that only the "master interrupt enable/disable flag in bit 0" is used.

Question 7. How many interrupt levels we actually use in OS/161?
Answer 7: OS/161 does not support interrupt priorities, so there are only three: splhigh() (sets spl to the highest value, disabling all interrupts), spl0() (sets spl to 0, enabling all interrupts), and splx(s) (sets spl to S, enabling whatever state S represents). Source: `~/os161/os161-1.11/kern/arch/mips/include/spl.h`